import os
import json
import logging
from flask import Flask, request, jsonify, send_file, render_template
from flask_cors import CORS
from openai import OpenAI

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# ===== ƒê·ªåC CONFIG T·ª™ OPTIONS =====
def load_config():
    """Load configuration from Home Assistant options"""
    config_file = '/data/options.json'
    
    if os.path.exists(config_file):
        with open(config_file, 'r') as f:
            return json.load(f)
    
    # Default config
    return {
        'bot_name': 'B·∫°n ƒë·ªìng h√†nh - Y√™n H√≤a',
        'openai_api_key': os.environ.get('OPENAI_API_KEY', ''),
        'openai_model': 'gpt-4o-mini',
        'openai_voice': 'nova',
        'openai_language': 'vi',
        'voice_enabled': True,
        'auto_speak': True,
        'content_filter_enabled': True,
        'blocked_keywords': ['b·∫°o l·ª±c', 'ƒë√°nh nhau', 'gi·∫øt'],
        'max_message_length': 500
    }

CONFIG = load_config()

# OpenAI client
OPENAI_API_KEY = CONFIG.get('openai_api_key')
OPENAI_MODEL = CONFIG.get('openai_model', 'gpt-4o-mini')
OPENAI_VOICE = CONFIG.get('openai_voice', 'nova')
OPENAI_LANGUAGE = CONFIG.get('openai_language', 'vi')
BOT_NAME = CONFIG.get('bot_name', 'B·∫°n ƒë·ªìng h√†nh - Y√™n H√≤a')

client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

logger.info(f"Bot Name: {BOT_NAME}")
logger.info(f"Model: {OPENAI_MODEL}")
logger.info(f"Language: {OPENAI_LANGUAGE}")
logger.info(f"Voice: {OPENAI_VOICE}")

# ===== CONTENT FILTER =====
class ContentFilter:
    def __init__(self, config):
        self.enabled = config.get('content_filter_enabled', True)
        self.blocked_keywords = [k.lower() for k in config.get('blocked_keywords', [])]
        self.max_length = config.get('max_message_length', 500)
        
        logger.info(f"Content Filter: {'Enabled' if self.enabled else 'Disabled'}")
        logger.info(f"Blocked keywords: {len(self.blocked_keywords)}")
    
    def is_safe(self, text: str) -> tuple[bool, str]:
        """Check if content is safe"""
        if not self.enabled:
            return True, ""
        
        text_lower = text.lower()
        
        # Check length
        if len(text) > self.max_length:
            return False, f"Tin nh·∫Øn qu√° d√†i (t·ªëi ƒëa {self.max_length} k√Ω t·ª±)"
        
        # Check blocked keywords
        for keyword in self.blocked_keywords:
            if keyword in text_lower:
                return False, f"N·ªôi dung kh√¥ng ph√π h·ª£p"
        
        return True, ""
    
    def sanitize(self, text: str) -> str:
        """Clean text"""
        import re
        text = ' '.join(text.split())
        text = re.sub(r'[^\w\s.,!?√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë-]', '', text, flags=re.IGNORECASE)
        return text.strip()

content_filter = ContentFilter(CONFIG)

# ===== SYSTEM PROMPT =====
def get_system_prompt():
    """Generate system prompt"""
    age_min = 6
    age_max = 15
    
    if OPENAI_LANGUAGE == 'vi':
        return f"""B·∫°n l√† "{BOT_NAME}" - tr·ª£ l√Ω AI th√¢n thi·ªán t·∫°i Tr∆∞·ªùng TH & THCS Y√™n H√≤a, ƒê√† B·∫Øc, H√≤a B√¨nh.

üéØ NHI·ªÜM V·ª§:
- Gi√∫p h·ªçc sinh t·ª´ {age_min}-{age_max} tu·ªïi h·ªçc t·∫≠p
- Tr·∫£ l·ªùi v·ªÅ To√°n, Ti·∫øng Anh, Khoa h·ªçc, L·ªãch s·ª≠, ƒê·ªãa l√Ω
- Gi·∫£i th√≠ch ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu
- Khuy·∫øn kh√≠ch tinh th·∫ßn h·ªçc t·∫≠p

üßë‚Äçüè´ PHONG C√ÅCH:
- ·∫§m √°p, ki√™n nh·∫´n nh∆∞ th·∫ßy/c√¥ gi√°o
- D√πng v√≠ d·ª• th·ª±c t·∫ø g·∫ßn g≈©i
- Khen ng·ª£i khi ƒë√∫ng, ƒë·ªông vi√™n khi sai
- D√πng emoji vui v·∫ª: üìö ‚úèÔ∏è üåü üí° üëç

üìù ƒê·ªäNH D·∫†NG:
- C√¢u ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu
- Gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc
- K·∫øt th√∫c b·∫±ng c√¢u h·ªèi ho·∫∑c khuy·∫øn kh√≠ch

‚ö†Ô∏è NGUY√äN T·∫ÆC:
- KH√îNG ƒë·ªÅ c·∫≠p b·∫°o l·ª±c, kinh d·ªã, ng∆∞·ªùi l·ªõn
- KH√îNG n√≥i ch√≠nh tr·ªã, t√¥n gi√°o nh·∫°y c·∫£m
- N·∫æU c√¢u h·ªèi kh√¥ng ph√π h·ª£p: "Em ∆°i, c√¢u h·ªèi n√†y kh√¥ng ph√π h·ª£p. Em h·ªèi th·∫ßy/c√¥ gi√°o nh√©!"

H√£y nhi·ªát t√¨nh v√† h·ªØu √≠ch! üåü"""
    else:  # English
        return f"""You are "{BOT_NAME}" - a friendly AI tutor at Yen Hoa Primary & Secondary School, Da Bac, Hoa Binh.

üéØ MISSION:
- Help students aged {age_min}-{age_max} learn
- Answer Math, English, Science, History, Geography questions
- Explain simply and clearly
- Encourage learning spirit

üßë‚Äçüè´ STYLE:
- Warm, patient like a teacher
- Use practical examples
- Praise correct answers, encourage mistakes
- Use friendly emojis: üìö ‚úèÔ∏è üåü üí° üëç

üìù FORMAT:
- Short, clear sentences
- Explain step by step
- End with question or encouragement

‚ö†Ô∏è RULES:
- NO violence, horror, adult content
- NO sensitive politics or religion
- IF inappropriate question: "This question isn't suitable. Please ask your teacher!"

Be enthusiastic and helpful! üåü"""

# ===== CHAT FUNCTION =====
def chat_with_openai(message: str) -> str:
    """Chat with OpenAI"""
    if not client:
        return "L·ªói: API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh"
    
    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": get_system_prompt()},
                {"role": "user", "content": message}
            ],
            max_tokens=500,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        logger.error(f"OpenAI error: {str(e)}")
        return "Xin l·ªói, c√≥ l·ªói x·∫£y ra. B·∫°n th·ª≠ l·∫°i nh√©! üòä"

# ===== API ENDPOINTS =====
@app.route('/')
def index():
    """Serve web interface"""
    return render_template('index.html')

@app.route('/api/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'ok',
        'bot_name': BOT_NAME,  # ‚Üê TH√äM BOT NAME
        'model': OPENAI_MODEL,
        'voice': OPENAI_VOICE,
        'language': OPENAI_LANGUAGE,
        'voice_enabled': CONFIG.get('voice_enabled', True),
        'content_filter': {
            'enabled': content_filter.enabled,
            'blocked_keywords_count': len(content_filter.blocked_keywords)
        },
        'api_key_configured': bool(OPENAI_API_KEY)
    })

@app.route('/api/chat', methods=['POST'])
def chat():
    """Chat endpoint with content filtering"""
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        
        if not message:
            return jsonify({"error": "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}), 400
        
        # Sanitize input
        message = content_filter.sanitize(message)
        
        # Check safety
        is_safe, error_msg = content_filter.is_safe(message)
        if not is_safe:
            return jsonify({
                "error": error_msg,
                "response": "Xin l·ªói b·∫°n nh·ªè, c√¢u h·ªèi n√†y kh√¥ng ph√π h·ª£p. B·∫°n h·ªèi c√¢u kh√°c nh√©! üòä"
            }), 400
        
        # Get AI response
        response = chat_with_openai(message)
        
        # Check response safety
        is_safe, error_msg = content_filter.is_safe(response)
        if not is_safe:
            logger.warning(f"Unsafe AI response filtered")
            response = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. B·∫°n h·ªèi c√¢u kh√°c nh√©! üòä"
        
        return jsonify({
            "response": response,
            "model": OPENAI_MODEL
        })
        
    except Exception as e:
        logger.error(f"Chat error: {str(e)}")
        return jsonify({
            "error": str(e),
            "response": "·ªêi! C√≥ l·ªói x·∫£y ra. B·∫°n th·ª≠ l·∫°i nh√©! üòä"
        }), 500

if __name__ == '__main__':
    PORT = int(os.environ.get('PORT', 5000))
    LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
    app.run(host='0.0.0.0', port=PORT, debug=(LOG_LEVEL == 'DEBUG'))
