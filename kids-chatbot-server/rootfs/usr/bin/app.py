#!/usr/bin/env python3
import os
import logging
import tempfile
import time
import secrets
from datetime import datetime, timedelta
from flask import Flask, request, make_response, jsonify, send_from_directory, Response
from flask_cors import CORS
from openai import OpenAI
from pathlib import Path
import io
import struct
import json

# Import utilities
from utils.content_filter import is_safe_content
from utils.response_templates import get_response_template
try:
    from utils.db_helper import DatabaseHelper
    db = DatabaseHelper
except ImportError:
    logger.warning("‚ö†Ô∏è Database helper not available, using in-memory only")
    db = None
    
SERVER_URL = os.getenv('SERVER_URL', 'https://school.sfdp.net')

# Set up logging
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
if LOG_LEVEL not in ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]:
    LOG_LEVEL = "INFO"

logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__, static_folder='/usr/bin/static')
CORS(app)

# --- Configuration ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
OPENAI_VOICE = os.getenv("OPENAI_VOICE", "alloy")
PORT = int(os.getenv("PORT", "5000"))
MAX_TOKENS = int(os.getenv("MAX_TOKENS", "500"))
TEMPERATURE = float(os.getenv("TEMPERATURE", "0.7"))

CONTEXT_ENABLED = os.getenv("CONTEXT_ENABLED", "true").lower() == "true"
CONTEXT_MAX_MESSAGES = int(os.getenv("CONTEXT_MAX_MESSAGES", "20"))
CONTEXT_TIMEOUT_MINUTES = int(os.getenv("CONTEXT_TIMEOUT_MINUTES", "30"))
CONTEXT_PERSIST = os.getenv("CONTEXT_PERSIST", "true").lower() == "true"  # ‚¨ÖÔ∏è TH√äM M·ªöI
CONTEXT_STORAGE_DIR = os.getenv("CONTEXT_STORAGE_DIR", "/data/conversations")  # ‚¨ÖÔ∏è TH√äM M·ªöI

BOT_LANGUAGE = os.getenv("BOT_LANGUAGE", "vi").lower()
CUSTOM_PROMPT_ADDITIONS = os.getenv("CUSTOM_PROMPT_ADDITIONS", "")

# Voice selection based on language
VOICE_MAP = {
    'vi': os.getenv("VOICE_VIETNAMESE", "alloy"),
    'en': os.getenv("VOICE_ENGLISH", "nova"),
    'auto': OPENAI_VOICE
}

logger.info(f"--- Y√™n Ho√† ChatBot Server Starting ---")
logger.info(f"Model: {OPENAI_MODEL}")
logger.info(f"Voice: {OPENAI_VOICE}")
logger.info(f"Voice Map: VI={VOICE_MAP['vi']}, EN={VOICE_MAP['en']}")
logger.info(f"Language: {BOT_LANGUAGE}")
logger.info(f"Context Enabled: {CONTEXT_ENABLED}")
logger.info(f"Context Persist: {CONTEXT_PERSIST}")
logger.info(f"Custom Prompt: {CUSTOM_PROMPT_ADDITIONS[:50]}..." if CUSTOM_PROMPT_ADDITIONS else "Custom Prompt: (none)")
logger.info(f"Port: {PORT}")
logger.info(f"------------------------------------")

# Validate and initialize OpenAI client
if not OPENAI_API_KEY:
    logger.error("CRITICAL: OPENAI_API_KEY is not set!")
    client = None
else:
    logger.info("OpenAI API key is configured")
    client = OpenAI(api_key=OPENAI_API_KEY)

# Initialize database connection
if CONTEXT_PERSIST and db:
    DB_CONFIG = {
        'host': os.getenv('DB_HOST', '192.168.100.251'),
        'user': os.getenv('DB_USER', 'paulsteigel'),
        'password': os.getenv('DB_PASSWORD', 'D1ndh1sk'),
        'database': os.getenv('DB_NAME', 'homeassistant'),
        'charset': 'utf8mb4',
        'use_unicode': True
    }
    
    try:
        db.initialize(DB_CONFIG)
        logger.info("‚úÖ Database connection established")
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")
        logger.warning("‚ö†Ô∏è Falling back to in-memory storage")
        db = None
        
# Create storage directory if persist is enabled
if CONTEXT_PERSIST:
    Path(CONTEXT_STORAGE_DIR).mkdir(parents=True, exist_ok=True)
    logger.info(f"üìÅ Context storage: {CONTEXT_STORAGE_DIR}")

# In-memory conversation storage
conversations = {}


class ConversationManager:
    """Qu·∫£n l√Ω context, language, voice preferences v·ªõi MySQL persistence"""
    
    @staticmethod
    def get_or_create_session(session_id=None, preferred_lang=None, preferred_voice=None):
        """L·∫•y ho·∫∑c t·∫°o session ID m·ªõi"""
        if session_id and session_id in conversations:
            conversations[session_id]['last_activity'] = datetime.now()
            if preferred_lang:
                conversations[session_id]['language'] = preferred_lang
            if preferred_voice:
                conversations[session_id]['voice'] = preferred_voice
            
            # L∆∞u v√†o DB
            if CONTEXT_PERSIST and db:
                db.save_session(session_id, conversations[session_id])
            
            return session_id
        
        # Load t·ª´ database n·∫øu t·ªìn t·∫°i
        if session_id and CONTEXT_PERSIST and db:
            loaded_data = db.load_session(session_id)
            if loaded_data:
                conversations[session_id] = loaded_data
                conversations[session_id]['last_activity'] = datetime.now()
                logger.info(f"üìÇ Loaded session from database: {session_id}")
                return session_id
        
        # T·∫°o session m·ªõi
        new_session_id = session_id or secrets.token_hex(16)
        lang = preferred_lang or BOT_LANGUAGE
        voice = preferred_voice or VOICE_MAP.get(lang, OPENAI_VOICE)
        
        system_prompt_template = get_response_template('system', lang)
        final_system_prompt = system_prompt_template.replace("{{CUSTOM_INSTRUCTIONS}}", CUSTOM_PROMPT_ADDITIONS)
        
        greeting_message = get_response_template('greeting', lang)
        
        conversations[new_session_id] = {
            'messages': [{"role": "system", "content": final_system_prompt}],
            'language': lang,
            'voice': voice,
            'created_at': datetime.now(),
            'last_activity': datetime.now(),
            'metadata': {
                'title': f"Conversation {datetime.now().strftime('%Y-%m-%d %H:%M')}",
                'initial_greeting': greeting_message
            }
        }
        
        logger.info(f"‚úÖ Created new session: {new_session_id} (language: {lang}, voice: {voice})")
        
        # L∆∞u v√†o database
        if CONTEXT_PERSIST and db:
            db.save_session(new_session_id, conversations[new_session_id])
            db.save_message(new_session_id, 'system', final_system_prompt)
        
        return new_session_id
    
    @staticmethod
    def add_message(session_id, role, content, tokens_used=0):
        """Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠"""
        if session_id not in conversations:
            ConversationManager.get_or_create_session(session_id)
        
        conversations[session_id]['messages'].append({"role": role, "content": content})
        conversations[session_id]['last_activity'] = datetime.now()
        
        # L∆∞u v√†o database
        if CONTEXT_PERSIST and db:
            db.save_message(session_id, role, content, tokens_used)
            db.save_session(session_id, conversations[session_id])
        
        messages = conversations[session_id]['messages']
        if len(messages) > CONTEXT_MAX_MESSAGES + 1:
            conversations[session_id]['messages'] = [messages[0]] + messages[-(CONTEXT_MAX_MESSAGES):]
            logger.info(f"üîÑ Trimmed context for session {session_id}")
    
    @staticmethod
    def get_messages(session_id):
        """L·∫•y to√†n b·ªô l·ªãch s·ª≠ tin nh·∫Øn"""
        if session_id not in conversations:
            ConversationManager.get_or_create_session(session_id)
        return conversations[session_id]['messages']
    
    @staticmethod
    def get_language(session_id):
        """L·∫•y ng√¥n ng·ªØ hi·ªán t·∫°i c·ªßa session"""
        if session_id in conversations:
            return conversations[session_id].get('language', BOT_LANGUAGE)
        return BOT_LANGUAGE
    
    @staticmethod
    def get_voice(session_id):
        """L·∫•y voice hi·ªán t·∫°i c·ªßa session"""
        if session_id in conversations:
            return conversations[session_id].get('voice', OPENAI_VOICE)
        return OPENAI_VOICE
    
    @staticmethod
    def get_greeting(session_id):
        """L·∫•y greeting message c·ªßa session"""
        if session_id in conversations:
            return conversations[session_id].get('metadata', {}).get('initial_greeting', '')
        return ''
    
    @staticmethod
    def set_language(session_id, language):
        """Thay ƒë·ªïi ng√¥n ng·ªØ c·ªßa session v√† c·∫≠p nh·∫≠t system prompt"""
        if session_id in conversations:
            conversations[session_id]['language'] = language
            new_system_prompt = get_response_template('system', language)
            new_system_prompt = new_system_prompt.replace("{{CUSTOM_INSTRUCTIONS}}", CUSTOM_PROMPT_ADDITIONS)
            conversations[session_id]['messages'][0] = {"role": "system", "content": new_system_prompt}
            
            if 'voice_override' not in conversations[session_id]:
                conversations[session_id]['voice'] = VOICE_MAP.get(language, OPENAI_VOICE)
            
            logger.info(f"üåê Session {session_id} switched to language: {language}")
            
            if CONTEXT_PERSIST and db:
                db.save_session(session_id, conversations[session_id])
            
            return True
        return False
    
    @staticmethod
    def set_voice(session_id, voice):
        """Thay ƒë·ªïi gi·ªçng n√≥i c·ªßa session"""
        if session_id in conversations:
            conversations[session_id]['voice'] = voice
            conversations[session_id]['voice_override'] = True
            logger.info(f"üé§ Session {session_id} switched to voice: {voice}")
            
            if CONTEXT_PERSIST and db:
                db.save_session(session_id, conversations[session_id])
            
            return True
        return False
    
    @staticmethod
    def clear_session(session_id):
        """X√≥a session"""
        if session_id in conversations:
            del conversations[session_id]
            logger.info(f"üóëÔ∏è Cleared session: {session_id}")
            
            if CONTEXT_PERSIST and db:
                db.delete_session(session_id)
            
            return True
        return False
    
    @staticmethod
    def cleanup_old_sessions():
        """X√≥a c√°c session kh√¥ng ho·∫°t ƒë·ªông"""
        now = datetime.now()
        timeout = timedelta(minutes=CONTEXT_TIMEOUT_MINUTES)
        
        # Cleanup in-memory
        expired_sessions = [
            sid for sid, data in conversations.items()
            if now - data['last_activity'] > timeout
        ]
        for sid in expired_sessions:
            del conversations[sid]
            logger.info(f"‚è∞ Auto-deleted expired session: {sid}")
        
        # Cleanup database
        if CONTEXT_PERSIST and db:
            db.cleanup_old_sessions(CONTEXT_TIMEOUT_MINUTES)
        
        return len(expired_sessions)



# ============================================
# LANGUAGE & VOICE DETECTION
# ============================================

def detect_language(text):
    """
    Nh·∫≠n di·ªán ng√¥n ng·ªØ d·ª±a tr√™n b·ªô k√Ω t·ª±
    Improved version: Ki·ªÉm tra t·ª∑ l·ªá thay v√¨ ch·ªâ c√≥/kh√¥ng c√≥
    """
    vietnamese_chars = '√†√°·∫£√£·∫°ƒÉ·∫±·∫Ø·∫≥·∫µ·∫∑√¢·∫ß·∫•·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π√™·ªÅ·∫ø·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªì·ªë·ªï·ªó·ªô∆°·ªù·ªõ·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª´·ª©·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµƒë'
    text_lower = text.lower()
    
    # ƒê·∫øm s·ªë l∆∞·ª£ng k√Ω t·ª± m·ªói lo·∫°i
    vi_char_count = sum(1 for char in text_lower if char in vietnamese_chars)
    en_char_count = sum(1 for char in text_lower if char.isalpha() and char.isascii())
    total_alpha = sum(1 for char in text_lower if char.isalpha())
    
    if total_alpha == 0:
        return 'auto'
    
    # T√≠nh t·ª∑ l·ªá
    vi_ratio = vi_char_count / total_alpha
    en_ratio = en_char_count / total_alpha
    
    # Quy·∫øt ƒë·ªãnh d·ª±a tr√™n t·ª∑ l·ªá
    if vi_ratio > 0.1:  # N·∫øu >10% l√† k√Ω t·ª± ti·∫øng Vi·ªát ‚Üí ti·∫øng Vi·ªát
        return 'vi'
    elif en_ratio > 0.5:  # N·∫øu >50% l√† k√Ω t·ª± ASCII ‚Üí ti·∫øng Anh
        return 'en'
    else:
        return 'auto'


def detect_language_switch_intent(user_message):
    """
    Ph√°t hi·ªán √Ω ƒë·ªãnh chuy·ªÉn ng√¥n ng·ªØ
    Returns: (target_language, is_switch_request)
    """
    message_lower = user_message.lower().strip()
    
    # Y√™u c·∫ßu chuy·ªÉn sang ti·∫øng Anh
    en_triggers = [
        'speak english', 'talk in english', 'use english', 'switch to english',
        'answer in english', 'reply in english', 'say it in english',
        'h√£y n√≥i ti·∫øng anh', 'n√≥i ti·∫øng anh', 'chuy·ªÉn sang ti·∫øng anh', 
        'd√πng ti·∫øng anh', 'tr·∫£ l·ªùi b·∫±ng ti·∫øng anh', 'ƒë·ªïi sang ti·∫øng anh'
    ]
    
    # Y√™u c·∫ßu chuy·ªÉn sang ti·∫øng Vi·ªát
    vi_triggers = [
        'speak vietnamese', 'talk in vietnamese', 'use vietnamese', 
        'switch to vietnamese', 'answer in vietnamese', 'reply in vietnamese',
        'h√£y n√≥i ti·∫øng vi·ªát', 'n√≥i ti·∫øng vi·ªát', 'chuy·ªÉn sang ti·∫øng vi·ªát', 
        'd√πng ti·∫øng vi·ªát', 'tr·∫£ l·ªùi b·∫±ng ti·∫øng vi·ªát', 'ƒë·ªïi sang ti·∫øng vi·ªát'
    ]
    
    for trigger in en_triggers:
        if trigger in message_lower:
            return ('en', True)
    
    for trigger in vi_triggers:
        if trigger in message_lower:
            return ('vi', True)
    
    return (None, False)


def detect_voice_change_intent(user_message):
    """
    Ph√°t hi·ªán √Ω ƒë·ªãnh thay ƒë·ªïi gi·ªçng n√≥i
    Returns: (voice_name, is_voice_change_request)
    """
    message_lower = user_message.lower().strip()
    
    voice_mappings = {
        'nova': [
            'gi·ªçng n·ªØ', 'gi·ªçng g√°i', 'gi·ªçng con g√°i',
            'female voice', 'woman voice', 'girl voice', 
            'd√πng gi·ªçng n·ªØ', 'chuy·ªÉn gi·ªçng n·ªØ', 'ƒë·ªïi gi·ªçng n·ªØ',
            'use female voice', 'switch to female', 'change to female voice',
            'gi·ªçng nova', 'voice nova', 'use nova'
        ],
        
        'shimmer': [
            'gi·ªçng n·ªØ m·ªÅm', 'gi·ªçng n·ªØ nh·∫π nh√†ng',
            'soft female voice', 'gentle female voice',
            'gi·ªçng shimmer', 'voice shimmer', 'use shimmer'
        ],
        
        'onyx': [
            'gi·ªçng nam', 'gi·ªçng trai', 'gi·ªçng con trai',
            'male voice', 'man voice', 'boy voice',
            'd√πng gi·ªçng nam', 'chuy·ªÉn gi·ªçng nam', 'ƒë·ªïi gi·ªçng nam',
            'use male voice', 'switch to male', 'change to male voice',
            'gi·ªçng onyx', 'voice onyx', 'use onyx'
        ],
        
        'echo': [
            'gi·ªçng nam echo', 'gi·ªçng echo',
            'voice echo', 'use echo'
        ],
        
        'fable': [
            'gi·ªçng fable', 'voice fable', 'use fable'
        ],
        
        'alloy': [
            'gi·ªçng trung t√≠nh', 'gi·ªçng neutral',
            'neutral voice', 'default voice',
            'gi·ªçng alloy', 'voice alloy', 'use alloy'
        ]
    }
    
    for voice, triggers in voice_mappings.items():
        for trigger in triggers:
            if trigger in message_lower:
                return (voice, True)
    
    return (None, False)


# ============================================
# AUDIO PROCESSING
# ============================================

def transcribe_audio(audio_data):
    """Transcribe audio using OpenAI Whisper API"""
    try:
        logger.info("üé§ Transcribing audio with Whisper...")
        audio_file = io.BytesIO(audio_data)
        audio_file.name = "audio.wav"
        lang_param = BOT_LANGUAGE if BOT_LANGUAGE != 'auto' else None
        
        transcript = client.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file,
            language=lang_param
        )
        
        text = transcript.text.strip()
        logger.info(f"‚úì Transcription: {text}")
        return text
        
    except Exception as e:
        logger.error(f"‚ùå Transcription error: {str(e)}")
        raise


def get_chat_response(user_message, session_id='default', return_greeting=False):
    """
    Get AI response with intelligent language and voice handling
    
    Args:
        user_message: User's input text
        session_id: Session identifier
        return_greeting: If True and it's first message, return greeting instead
    """
    try:
        logger.info(f"ü§ñ Getting AI response for: {user_message}")
        
        detected_lang = detect_language(user_message)
        
        if not is_safe_content(user_message):
            return get_response_template('inappropriate', detected_lang)
        
        (target_voice, is_voice_change) = detect_voice_change_intent(user_message)
        (target_lang, is_lang_switch) = detect_language_switch_intent(user_message)
        
        if CONTEXT_ENABLED:
            session_id = ConversationManager.get_or_create_session(session_id)
            current_lang = ConversationManager.get_language(session_id)
            current_voice = ConversationManager.get_voice(session_id)
            
            # N·∫øu l√† l·∫ßn ƒë·∫ßu ti√™n v√† y√™u c·∫ßu greeting
            messages = ConversationManager.get_messages(session_id)
            if return_greeting and len(messages) == 1:  # Ch·ªâ c√≥ system message
                greeting = ConversationManager.get_greeting(session_id)
                if greeting:
                    ConversationManager.add_message(session_id, "assistant", greeting)
                    logger.info(f"üëã Returned initial greeting for session {session_id}")
                    return greeting
            
            # X·ª¨ L√ù THAY ƒê·ªîI GI·ªåNG N√ìI
            if is_voice_change and target_voice:
                ConversationManager.set_voice(session_id, target_voice)
                voice_descriptions = {
                    'nova': 'gi·ªçng n·ªØ Nova' if current_lang == 'vi' else 'female voice Nova',
                    'onyx': 'gi·ªçng nam Onyx' if current_lang == 'vi' else 'male voice Onyx',
                    'alloy': 'gi·ªçng Alloy' if current_lang == 'vi' else 'voice Alloy',
                    'echo': 'gi·ªçng Echo' if current_lang == 'vi' else 'voice Echo',
                    'fable': 'gi·ªçng Fable' if current_lang == 'vi' else 'voice Fable',
                    'shimmer': 'gi·ªçng Shimmer' if current_lang == 'vi' else 'voice Shimmer'
                }
                voice_desc = voice_descriptions.get(target_voice, target_voice)
                
                confirmation = (
                    f"ƒê∆∞·ª£c r·ªìi! M√¨nh s·∫Ω d√πng {voice_desc} t·ª´ b√¢y gi·ªù nh√©." 
                    if current_lang == 'vi' 
                    else f"Sure! I'll use {voice_desc} from now on."
                )
                ConversationManager.add_message(session_id, "user", user_message)
                ConversationManager.add_message(session_id, "assistant", confirmation)
                logger.info(f"üé§ Voice changed to {target_voice} for session {session_id}")
                return confirmation
            
            # X·ª¨ L√ù THAY ƒê·ªîI NG√îN NG·ªÆ
            if is_lang_switch and target_lang:
                ConversationManager.set_language(session_id, target_lang)
                lang_name = "English" if target_lang == 'en' else "Ti·∫øng Vi·ªát"
                confirmation = (
                    f"Okay! I'll speak {lang_name} from now on." 
                    if target_lang == 'en' 
                    else f"ƒê∆∞·ª£c r·ªìi! M√¨nh s·∫Ω n√≥i {lang_name} t·ª´ b√¢y gi·ªù nh√©."
                )
                ConversationManager.add_message(session_id, "user", user_message)
                ConversationManager.add_message(session_id, "assistant", confirmation)
                logger.info(f"üåê Language switched to {target_lang} for session {session_id}")
                return confirmation
            
            # T·ª± ƒë·ªông nh·∫≠n di·ªán ng√¥n ng·ªØ input
            detected_input_lang = detect_language(user_message)
            
            if detected_input_lang != 'auto' and detected_input_lang != current_lang:
                logger.info(f"üåê Auto-switching language from {current_lang} to {detected_input_lang}")
                ConversationManager.set_language(session_id, detected_input_lang)
            
            ConversationManager.add_message(session_id, "user", user_message)
            messages = ConversationManager.get_messages(session_id)
            
        else:
            session_id = ConversationManager.get_or_create_session()
            system_prompt_template = get_response_template('system', detected_lang if detected_lang != 'auto' else BOT_LANGUAGE)
            final_system_prompt = system_prompt_template.replace("{{CUSTOM_INSTRUCTIONS}}", CUSTOM_PROMPT_ADDITIONS)
            messages = [
                {"role": "system", "content": final_system_prompt},
                {"role": "user", "content": user_message}
            ]
        
        logger.info(f"üìù Sending {len(messages)} messages to OpenAI (session: {session_id})")
        
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=messages,
            max_tokens=MAX_TOKENS,
            temperature=TEMPERATURE
        )
        
        assistant_message = response.choices[0].message.content
        
        if CONTEXT_ENABLED:
            ConversationManager.add_message(session_id, "assistant", assistant_message)
        
        logger.info(f"‚úì AI Response: {assistant_message}")
        return assistant_message
        
    except Exception as e:
        logger.error(f"‚ùå AI error: {str(e)}")
        raise


def text_to_speech(text, format='mp3', language='auto', session_id=None):
    """Convert text to speech with automatic voice selection"""
    try:
        if session_id and CONTEXT_ENABLED:
            voice = ConversationManager.get_voice(session_id)
            logger.info(f"üé§ Using session voice preference: {voice}")
        else:
            if language == 'auto':
                detected_lang = detect_language(text)
                voice = VOICE_MAP.get(detected_lang, OPENAI_VOICE)
            else:
                voice = VOICE_MAP.get(language, OPENAI_VOICE)
        
        logger.info(f"üîä Converting to speech ({format}, voice={voice}, lang={language}): {text[:50]}...")
        
        if format == 'wav':
            response = client.audio.speech.create(
                model="tts-1",
                voice=voice,
                input=text,
                response_format="pcm"
            )
            
            pcm_data = response.content
            logger.info(f"‚úì Received {len(pcm_data)} bytes of PCM audio")
            
            pcm_16bit = struct.unpack(f'<{len(pcm_data)//2}h', pcm_data)
            resampled = []
            position = 0.0
            step = 24000 / 16000
            
            while int(position) < len(pcm_16bit):
                resampled.append(pcm_16bit[int(position)])
                position += step
            
            resampled_pcm = struct.pack(f'<{len(resampled)}h', *resampled)
            logger.info(f"‚úì Resampled to {len(resampled_pcm)} bytes at 16kHz")
            
            wav_header = create_wav_header(len(resampled_pcm), 16000, 1, 16)
            wav_file = wav_header + resampled_pcm
            
            logger.info(f"‚úì Generated {len(wav_file)} bytes of WAV audio (voice: {voice})")
            return wav_file
            
        else:
            response = client.audio.speech.create(
                model="tts-1",
                voice=voice,
                input=text,
                response_format="mp3"
            )
            
            audio_bytes = response.content
            logger.info(f"‚úì Generated {len(audio_bytes)} bytes of MP3 audio (voice: {voice})")
            return audio_bytes
        
    except Exception as e:
        logger.error(f"‚ùå TTS error: {str(e)}")
        raise


def create_wav_header(data_size, sample_rate=16000, channels=1, bits_per_sample=16):
    """Create a WAV file header"""
    byte_rate = sample_rate * channels * bits_per_sample // 8
    block_align = channels * bits_per_sample // 8
    
    header = struct.pack(
        '<4sI4s4sIHHIIHH4sI',
        b'RIFF',
        data_size + 36,
        b'WAVE',
        b'fmt ',
        16,
        1,
        channels,
        sample_rate,
        byte_rate,
        block_align,
        bits_per_sample,
        b'data',
        data_size
    )
    return header


# ============================================
# API ENDPOINTS
# ============================================

@app.route('/')
def index():
    """Serve the test interface"""
    return send_from_directory('/usr/bin/static', 'index.html')


@app.route('/api/chat', methods=['POST'])
def chat():
    """Handle chat requests WITH CONTEXT"""
    if not client:
        return jsonify({'error': 'OpenAI API key not configured'}), 500
    
    try:
        data = request.json
        user_message = data.get('message', '')
        session_id = data.get('session_id') or request.headers.get('X-Session-ID')
        
        if not user_message:
            return jsonify({'error': 'Message is required'}), 400
        
        ConversationManager.cleanup_old_sessions()
        
        if CONTEXT_ENABLED:
            session_id = ConversationManager.get_or_create_session(session_id)
        else:
            session_id = ConversationManager.get_or_create_session()
        
        detected_lang = detect_language(user_message)
        logger.info(f"Detected language: {detected_lang} for message: {user_message[:50]}")
        
        if not is_safe_content(user_message):
            response_text = get_response_template('inappropriate', detected_lang)
            if CONTEXT_ENABLED:
                ConversationManager.add_message(session_id, "user", user_message)
                ConversationManager.add_message(session_id, "assistant", response_text)
            return jsonify({'response': response_text, 'session_id': session_id})
        
        assistant_message = get_chat_response(user_message, session_id)
        
        return jsonify({
            'response': assistant_message,
            'model': OPENAI_MODEL,
            'detected_language': detected_lang,
            'session_id': session_id,
            'context_length': len(ConversationManager.get_messages(session_id)) if CONTEXT_ENABLED else 0
        })
    
    except Exception as e:
        logger.error(f"Error in chat endpoint: {str(e)}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/voice-chat', methods=['POST'])
def voice_chat():
    """Handle voice chat - MAIN ENDPOINT FOR ESP32"""
    if not client:
        return jsonify({'error': 'OpenAI API key not configured'}), 500
    
    try:
        session_id = request.headers.get('X-Session-ID')
        if not session_id:
            session_id = secrets.token_hex(16)
            logger.info(f"üÜï Created new session for ESP32: {session_id}")
        
        if 'audio' not in request.files:
            return jsonify({'error': 'No audio file provided'}), 400
        
        audio_data = request.files['audio'].read()
        logger.info(f"üì• Received {len(audio_data)} bytes of audio (session: {session_id})")

        transcribed_text = transcribe_audio(audio_data)
        logger.info(f"üìù Transcribed: {transcribed_text}")

        # Ki·ªÉm tra n·∫øu l√† l·∫ßn ƒë·∫ßu ti√™n g·ªçi ‚Üí tr·∫£ greeting
        messages = ConversationManager.get_messages(session_id) if session_id in conversations else []
        is_first_message = len(messages) <= 1  # Ch·ªâ c√≥ system prompt
        
        raw_ai_response = get_chat_response(transcribed_text, session_id, return_greeting=is_first_message)
        logger.info(f"ü§ñ Raw AI Response: {raw_ai_response}")

        current_lang = ConversationManager.get_language(session_id) if CONTEXT_ENABLED else detect_language(raw_ai_response)

        response_headers = {
            'Content-Type': 'audio/wav',
            'X-Transcription': transcribed_text.encode('utf-8').decode('latin-1'),
            'X-Response-Text': raw_ai_response.encode('utf-8').decode('latin-1'),
            'X-Session-ID': session_id,
            'X-Language': current_lang
        }
        
        text_for_tts = raw_ai_response

        if raw_ai_response.strip().startswith('{'):
            try:
                command_data = json.loads(raw_ai_response)
                command = command_data.get("command")
                value = command_data.get("value")

                if command and value:
                    logger.info(f"‚úÖ Parsed command: {command}, value: {value}")
                    response_headers['X-Device-Command'] = command
                    response_headers['X-Device-Value'] = str(value)
                    
                    confirmations = {
                        'set_volume': {
                            'vi': 'ƒê√£ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng',
                            'en': 'Volume adjusted'
                        },
                        'set_mic_gain': {
                            'vi': 'ƒê√£ ch·ªânh ƒë·ªô nh·∫°y mic',
                            'en': 'Mic sensitivity adjusted'
                        },
                        'stop_conversation': {
                            'vi': 'T·∫°m bi·ªát',
                            'en': 'Goodbye'
                        }
                    }
                    text_for_tts = confirmations.get(command, {}).get(current_lang, raw_ai_response)
            except json.JSONDecodeError:
                logger.warning("Response looked like JSON but was not valid.")

        audio_response = text_to_speech(text_for_tts, format='wav', language=current_lang, session_id=session_id)
        logger.info(f"üîä Generated TTS: '{text_for_tts}' (lang={current_lang}, session={session_id})")
        
        return Response(
            audio_response,
            mimetype='audio/wav',
            headers=response_headers
        )

    except Exception as e:
        logger.error(f"‚ùå Error in voice_chat: {str(e)}", exc_info=True)
        return jsonify({'error': str(e)}), 500


@app.route('/api/context/clear', methods=['POST'])
def clear_context():
    """Clear conversation context for a session"""
    try:
        data = request.json or {}
        session_id = data.get('session_id') or request.headers.get('X-Session-ID')
        
        if not session_id:
            return jsonify({'error': 'session_id required'}), 400
        
        if ConversationManager.clear_session(session_id):
            return jsonify({'message': 'Context cleared', 'session_id': session_id})
        else:
            return jsonify({'message': 'Session not found', 'session_id': session_id}), 404
    
    except Exception as e:
        logger.error(f"Error in clear_context: {str(e)}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'ok',
        'model': OPENAI_MODEL,
        'voice': OPENAI_VOICE,
        'language': BOT_LANGUAGE,
        'api_key_configured': bool(OPENAI_API_KEY),
        'context_enabled': CONTEXT_ENABLED,
        'context_persist': CONTEXT_PERSIST,
        'active_sessions': len(conversations)
    })


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=PORT, debug=(LOG_LEVEL == 'DEBUG'))
